#! /bin/bash


configure() {
  source crato-config

  # present and confirm values as entered
  echo $LOG_1_PATH
  echo $PUBLIC_IP_PORT

  if [ $LAN_IP_PORT -z ]; then
    echo "missing port number"
  fi
}

crato_help() {
  cat <<MESSAGE
Missing or unrecognized option. Crato requires a valid option flag.

Valid options:
  crato-client [-c | --configure]
  crato-client [-s | --suspend]
  crato-client [-r | --remove]
  crato-client [-h | --help]
MESSAGE
}

# PARSE ARGV
if [ -z $1 ]; then
  crato_help
  exit
fi

case $1 in 
  -c | --configure)    # configures or reconfigures crato
    echo "Now configuring Crato..."
     configure
     ;;
  -s | --suspend)   # suspends crato's activities without deleting configs
    echo "Suspend Crato's logging"
    # suspendcrato
    ;;
  -r | --remove)    # removes crato configs; option to remove crato
    echo "Remove Crato"
    # removecrato
    ;;
  *)
    crato_help
    exit
    ;;
esac



# CONFIRM SYSTEM & USER PREREQS:

#  compatibility of target system:
#     os & version of linux
#     viable rsyslog installed & running as service

#  user permissions:
#     user running root


# IF -c | --config

#     COLLECT / SET CONFIG VARIABLES


#     PREP FOR CONFIGURATION: IDENTIFY AND BACKUP EXISTING CONFIGS:

#           if first install
#            ensure appropriate directorys and a default rsyslog.conf file exist
#          else
#            cp rsyslog.d/49-crato.conf rsyslog.d/49-crato.conf.prev.timestamp



#     CONFIGURE CRATO

#         read in / gather config values
#         generate rsyslog.d/49-crato.conf file based on variables


# ELIF  -s | --suspend

#     STOP CRATO LOGGING
#       mv rsyslog.d/49-crato.conf rsyslog.d/49-crato.conf.prev.timestamp 

# ELIF -r | --remove


#     REMOVE CRATO
#     if stop logging and remove all of Crato
#       rm rsyslog.d/49-crato.conf
#       cd and remove Crato scripts
#     else 
#       rm rsyslog.d/49-crato.conf

# ELIF -h | --help



# RESTART RSYSLOG

#   confirm config validity


# restart rsyslog

