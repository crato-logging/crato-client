#! /bin/bash

readonly RSYSLOG_CONF_DIR="/etc/rsyslog.d"
readonly CRATO_RSYSLOG_CONF_FILE="${RSYSLOG_CONF_DIR}/49-crato.conf"

configure() {
  confirm_prereqs_for_use

  # TODO: check for missing values; prompt for each; type <enter> to continue or <ctl - c> to reconfigure

  # TODO: dynamically generate imfile blocks based on number of sources
  #       change data structure to do this?

  [ -d ${RSYSLOG_CONF_DIR} ] || mkdir ${RSYSLOG_CONF_DIR}

  cat > "${CRATO_RSYSLOG_CONF_FILE}" << CONF
# CRATO CLIENT CONFIGURATION
# use in conjuction with default rsyslog.conf and rsyslog.d/50-default.conf files

module(load="imfile")
input(type="imfile" File="${LOG_1_PATH}"
     Tag="${LOG_1_TAG}"
     Severity="${LOG_1_SEVERITY}"
     PersistStateInterval="20"
     Facility="local0")

input(type="imfile" File="${LOG_2_PATH}"
     Tag="${LOG_2_TAG}"
     Severity="${LOG_2_SEVERITY}"
     PersistStateInterval="20"
     Facility="local0")

*.* action(type="omfwd" target="${PUBLIC_IP}" port="${PUBLIC_IP_PORT}" protocol="tcp"
	   action.resumeRetryCount="100"
queue.type="linkedList" queue.size="10000")

CONF

restart_rsyslog
echo "Crato is now logging."
}

confirm_prereqs_for_use() {
  if [ -f crato-config ]; then
    source crato-config
  else
    echo "Unable to locate configuration file."
    echo "Please confirm your configurations are in 'crato-config'."
    exit 1
  fi
#  check compatibility of target system:
#     os & version of linux
#     viable rsyslog installed & running as service


#  check user permissions:
#     user running root
}

suspend_logging() {
  local conf="${CRATO_RSYSLOG_CONF_FILE}"

  if [ -f "$conf" ]; then
    mv "${conf}" "${conf}.suspended"
    restart_rsyslog
    echo "Crato logging suspended."
  else
    echo "Crato does not appear to be logging. Cannot suspend service."
  fi
}

resume_logging() {
  local conf="${CRATO_RSYSLOG_CONF_FILE}"

  if [ -f "${conf}.suspended" ]; then
    mv "${conf}.suspended" "${conf}"
    restart_rsyslog
    echo "Crato logging resumed."
  else
    echo "Crato is not suspended. Cannot resume service."
  fi
}

delete_crato() {
  # TODO: add option to remove this script as well
  local conf="${CRATO_RSYSLOG_CONF_FILE}"

  [ -f "${conf}.suspended" ] && rm "${conf}.suspended"
  [ -f "${conf}" ] && rm "${conf}"

  restart_rsyslog
  echo "Crato configurations removed."
}

restart_rsyslog() {
  echo "Validating new configuration."
  rsyslogd -N1
# TODO: check exit status of warning messages
  if [ $? -eq 0 ]; then
    service rsyslog restart
  else
    echo "Configuration error. Please see above message."
    exit 1
  fi 
}

crato_help() {
  cat << MSG

Missing or unrecognized option. Crato requires a valid option flag,
and most commands require 'sudo' privileges.

Valid options:
  sudo crato-client [-c | --configure]
  sudo crato-client [-s | --suspend]
  sudo crato-client [-r | --resume]
  sudo crato-client [-d | --delete]
       crato-client [-h | --help]

MSG
}

main() {
  if [ -z $1 ]; then
    crato_help
    exit
  fi

  case $1 in
    -c | --configure)
      echo "Configuring Crato ..."
       configure
       ;;
    -s | --suspend)   # suspends crato's activities without deleting configs
      echo "Suspending Crato's logging operations ..."
      suspend_logging
      ;;
    -r | --resume)
      echo "Resuming Crato's logging ..."
      resume_logging
      ;;
    -d | --delete)    # removes crato configs; option to remove crato
      echo "Deleting Crato ..."
      delete_crato
      ;;
    *)
      crato_help
      exit
      ;;
  esac
}

main "$@"

# CONFIRM SYSTEM & USER PREREQS:

#  compatibility of target system:
#     os & version of linux
#     viable rsyslog installed & running as service

#  user permissions:
#     user running root


# IF -c | --config

#     COLLECT / SET CONFIG VARIABLES


#     PREP FOR CONFIGURATION: IDENTIFY AND BACKUP EXISTING CONFIGS:

#           if first install
#            ensure appropriate directorys and a default rsyslog.conf file exist
#          else
#            cp rsyslog.d/49-crato.conf rsyslog.d/49-crato.conf.prev.timestamp



#     CONFIGURE CRATO

#         read in / gather config values
#         generate rsyslog.d/49-crato.conf file based on variables


# ELIF  -s | --suspend

#     STOP CRATO LOGGING
#       mv rsyslog.d/49-crato.conf rsyslog.d/49-crato.conf.prev.timestamp 

# ELIF -r | --remove


#     REMOVE CRATO
#     if stop logging and remove all of Crato
#       rm rsyslog.d/49-crato.conf
#       cd and remove Crato scripts
#     else 
#       rm rsyslog.d/49-crato.conf

# ELIF -h | --help



# RESTART RSYSLOG

#   confirm config validity


# restart rsyslog

