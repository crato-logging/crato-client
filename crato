#! /bin/bash

readonly USER_SETTINGS="crato-config"
readonly RSYSLOG_CONF_FILE="/etc/rsyslog.conf"
readonly RSYSLOG_CONF_DIR="/etc/rsyslog.d"
readonly CRATO_RSYSLOG_CONF_FILE="${RSYSLOG_CONF_DIR}/49-crato.conf"

configure() {
  confirm_prereqs_for_use

  [ -d ${RSYSLOG_CONF_DIR} ] || mkdir ${RSYSLOG_CONF_DIR}

  # TODO: allow LAN as forwarding target

  cat > "${CRATO_RSYSLOG_CONF_FILE}" << CONF
# CRATO CLIENT CONFIGURATION
# use in conjuction with default rsyslog.conf and rsyslog.d/50-default.conf files

module(load="imfile")

CONF

  IFS_OLD=$IFS
  IFS=$'\n'

  for input in $(cat "${USER_SETTINGS}"); do
    if [[ $input == LOG* ]]; then
      path=$(echo $input | cut -d ',' -f 1 | cut -d ':' -f 2)
      tag=$(echo $input | cut -d ',' -f 2)
      severity=$(echo $input | cut -d ',' -f 3)

      cat >> "${CRATO_RSYSLOG_CONF_FILE}" << INPUT
input(type="imfile" File="${path}"
     Tag="${tag}"
     Severity="${severity}"
     PersistStateInterval="20"
     Facility="local0")

INPUT

    elif [[ $input == PUBLIC* ]]; then
      public_ip=$(echo $input | cut -d ',' -f 1 | cut -d ':' -f 2)
      public_port=$(echo $input | cut -d ',' -f 2)

    cat >> "${CRATO_RSYSLOG_CONF_FILE}" << OUTPUT
*.* action(type="omfwd" target="${public_ip}" port="${public_port}" protocol="tcp"
    action.resumeRetryCount="100"
    queue.type="linkedList"
    queue.size="10000")

OUTPUT
    fi
  done
  IFS=$IFS_OLD


  restart_rsyslog
  echo "Crato is now logging."
}

confirm_prereqs_for_use() {
  confirm_user_permissions
  confirm_rsyslog_version
  confirm_config_include_statement
  confirm_config_file
}

confirm_user_permissions() {
 if [ $EUID -ne 0 ]; then
   echo "Script must run as root. Try executing command with 'sudo'"
   exit 1
 fi
}

confirm_rsyslog_version() {
  RSYS_VER=$(rsyslogd -v | head -1 | cut -d ' ' -f 2 | cut -d '.' -f 1)

  if [ $RSYS_VER -lt 8 ]; then
    echo "Dependency not found. Crato needs rsyslogd v8 or greater."
    exit 1
  fi
}

confirm_config_include_statement() {
  cat "${RSYSLOG_CONF_FILE}" | grep -q "^\s*\$IncludeConfig ${RSYSLOG_CONF_DIR}/\*.conf"

  if [ $? -ne 0 ]; then
    echo "\$IncludeConfig ${RSYSLOG_CONF_DIR}/*.conf" >> ${RSYSLOG_CONF_FILE}
  fi
}

confirm_config_file() {
  if [ ! -s $USER_SETTINGS ]; then
    echo "Unable to locate configuration file."
    echo "Please confirm your configurations are in 'crato-config'."
    exit 1
  fi
}

suspend_logging() {
  local conf="${CRATO_RSYSLOG_CONF_FILE}"

  if [ -f "$conf" ]; then
    mv "${conf}" "${conf}.suspended"
    restart_rsyslog
    echo "Crato logging suspended."
  else
    echo "Crato does not appear to be logging. Cannot suspend service."
  fi
}

resume_logging() {
  local conf="${CRATO_RSYSLOG_CONF_FILE}"

  if [ -f "${conf}.suspended" ]; then
    mv "${conf}.suspended" "${conf}"
    restart_rsyslog
    echo "Crato logging resumed."
  else
    echo "Crato is not suspended. Cannot resume service."
  fi
}

delete_crato() {
  local conf="${CRATO_RSYSLOG_CONF_FILE}"

  [ -f "${conf}.suspended" ] && rm "${conf}.suspended"
  [ -f "${conf}" ] && rm "${conf}"

  restart_rsyslog
  echo "Crato configurations removed."
}

restart_rsyslog() {
  echo "Validating new configuration."
  rsyslogd -N1
  if [ $? -eq 0 ]; then
    service rsyslog restart
  else
    echo "Configuration error. Please see above message."
    exit 1
  fi 
}

crato_help() {
  cat << MSG

Crato requires a valid option flag and most commands require 'sudo' privileges.

Valid options:
  sudo crato [-c | --configure]
  sudo crato [-s | --suspend]
  sudo crato [-r | --resume]
  sudo crato [-d | --delete]
       crato [-h | --help]

MSG
}

main() {
  if [ -z $1 ]; then
    crato_help
    exit 1
  fi

  case $1 in
    -c | --configure)
      echo "Configuring Crato ..."
       configure
       ;;
    -s | --suspend)
      echo "Suspending Crato's logging operations ..."
      suspend_logging
      ;;
    -r | --resume)
      echo "Resuming Crato's logging ..."
      resume_logging
      ;;
    -d | --delete)
      echo "Deleting Crato configuration ..."
      delete_crato
      ;;
    *)
      crato_help
      exit
      ;;
  esac
}

main "$@"
